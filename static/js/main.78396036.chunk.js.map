{"version":3,"sources":["RGBPicker.js","BarChart.js","App.js","serviceWorker.js","index.js"],"names":["Paragraph","Typography","RGBPicker","props","state","red","green","blue","min","max","onChange","setState","colorHandler","value","this","Component","BarChart","r","g","b","svg","selectAll","enter","append","attr","drawChart","prevProps","prevState","width","height","_","isEqual","data","clear","remove","c","w","h","d3","d","i","text","id","size","defaultValue","widthHandler","heightHandler","Search","Input","Title","App","sliderInputValue","test","errMsg","JSON","parse","err","className","span","level","e","placeholder","enterButton","allowClear","onSearch","interpretData","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78396036.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Slider, Typography } from 'antd';\n\nconst { Paragraph } = Typography;\n\nclass RGBPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      red: 0,\n      green: 0,\n      blue: 0\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Paragraph>\n          Red\n        </Paragraph>\n        <Slider\n          min={0}\n          max={255}\n          onChange={red => {\n            let { green, blue } = this.state;\n            this.setState({red: red});\n            return this.props.colorHandler(red, green, blue);\n          }}\n          value={typeof this.state.red === 'number' ? this.state.red : 0}\n        />\n        <Paragraph>\n          Green\n        </Paragraph>\n        <Slider\n          min={1}\n          max={255}\n          onChange={green => {\n            let { red, blue } = this.state;\n            this.setState({green: green});\n            return this.props.colorHandler(red, green, blue);\n          }}\n          value={typeof this.state.green === 'number' ? this.state.green : 0}\n        />\n        <Paragraph>\n          Blue\n        </Paragraph>\n        <Slider\n          min={1}\n          max={255}\n          onChange={blue => {\n            let { red, green } = this.state;\n            this.setState({blue: blue});\n            return this.props.colorHandler(red, green, blue);\n          }}\n          value={typeof this.state.blue === 'number' ? this.state.blue : 0}\n        />\n      </div>\n    );\n  }\n}\n\nexport default RGBPicker;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport { Typography, InputNumber } from 'antd';\nimport RGBPicker from './RGBPicker';\n\nconst { Paragraph } = Typography;\n\n\nclass BarChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      svg: ''\n    }\n  }\n  // first time\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.width !== this.props.width ||\n        prevProps.height !== this.props.height ||\n        !_.isEqual(prevProps.data, this.props.data)\n      ) {\n      this.clear();\n      this.drawChart();\n    }\n    let { red, green, blue } = this.state;\n    if (prevState.red !== red || prevState.green !== green || prevState.blue !== blue) {\n      this.clear();\n      this.drawChart();\n    }\n  }\n\n  clear() {\n    // const svg = d3.select('#CenterCol').selectAll('svg').remove();\n    if (this.state.svg) {\n      this.state.svg.remove();\n    }\n  }\n\n  drawChart(c) {\n    const data = this.props.data;\n    const w = this.props.width;\n    const h = this.props.height;\n    const { red, green, blue } = this.state;\n    const svg = d3.select(\"#CenterCol\")\n    .append('svg')\n    .attr('width', w)\n    .attr('height', h);\n    // add bars\n    svg.selectAll('rect')\n      .data(data)\n      .enter()\n      .append('rect')\n      .attr('x', (d, i) => i * 70)\n      .attr('y', (d, i) => h - 10 * d)\n      .attr('width', 65)\n      .attr('height', (d, i) => d * 10)\n      .attr('fill', (_) => {\n        return d3.rgb(red, green, blue);\n      });\n\n    // add labels\n    svg.selectAll('text')\n      .data(data)\n      .enter()\n      .append('text')\n      .text((d) => d)\n      .attr('x', (d, i) => i * 70)\n      .attr('y', (d, i) => h - (10 * d) - 3);\n\n    this.setState({svg: svg});\n  }\n\n  colorHandler = (r, g, b) => {\n    this.setState({red: r, green: g, blue: b});\n\n    this.state.svg.selectAll('rect')\n      .enter()\n      .append('rect')\n      .attr('fill', 'blue');\n  }\n\n\n  render() {\n    return (\n      <div id={'#' + this.props.id}>\n        <Paragraph>\n          Width (px)\n        </Paragraph>\n        <InputNumber\n          size='large'\n          min={200}\n          defaultValue={200}\n          onChange={this.props.widthHandler}\n        />\n        <Paragraph>\n          Height (px)\n        </Paragraph>\n        <InputNumber\n          size='large'\n          min={200}\n          max={600}\n          defaultValue={200}\n          onChange={this.props.heightHandler}\n        />\n        <RGBPicker\n          colorHandler={this.colorHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BarChart;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Input, Row, Col, Typography } from 'antd';\n\nimport BarChart from './BarChart';\n\n\nconst { Search } = Input;\nconst { Title, Paragraph } = Typography;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 200,\n      height: 200,\n      id: 'barchart',\n      data: [1, 2, 5],\n      sliderInputValue: 1,\n    };\n  }\n\n  interpretData(value) {\n    // [] or [n] where n > 0\n    const emptyRe = /^\\[\\]$/;\n    const reSingle = /^\\[^[1-9][0-9]*\\]$/;\n    const reArr = /^\\[([1-9][0-9]*,\\s*)+([1-9][0-9]*)*\\]$/;\n    if (emptyRe.test(value)) {\n      // clear error message\n      this.setState({data: [], errMsg: ''});\n    } else if (reSingle.test(value) || reArr.test(value)) {\n      let r = [];\n      try {\n        r = JSON.parse(value);\n        // clear error message\n        this.setState({data: r, errMsg: ''});\n      } catch(err) {\n        this.setState({errMsg: 'Failed to deserialize'});\n      }\n    } else {\n      this.setState({errMsg: 'Unexpected error'});\n    }\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Row>\n          <Col span={8}>\n          </Col>\n          <Col id='CenterCol' span={8}>\n            <Title level={2}>\n              Interactive D3.js BarChart\n            </Title>\n            <BarChart\n              data={this.state.data}\n              width={this.state.width}\n              height={this.state.height}\n              id={this.state.id}\n              widthHandler={e => this.setState({width: e})}\n              heightHandler={e => this.setState({height: e})}\n              sliderInputValue={this.state.sliderInputValue}\n            />\n            <Paragraph>\n              Data\n            </Paragraph>\n            <Search\n              placeholder=\"[1, 2, 3]\"\n              enterButton=\"Display\"\n              size=\"large\"\n              allowClear\n              onSearch={(e) => this.interpretData(e)}\n            />\n            <Paragraph type=\"warning\">\n              {this.state.errMsg}\n            </Paragraph>\n          </Col>\n          <Col span={8}>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}